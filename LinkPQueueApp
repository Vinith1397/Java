// Program to create Priority Queue using Linked List //


class Link
{
public long dData; // data item
public Link next; // next link in list
// -------------------------------------------------------------
public Link(long dd) // constructor
{ dData = dd; }
// -------------------------------------------------------------
public void displayLink() // display this link
{ System.out.print(dData + " "); }

} // end class Link
////////////////////////////////////////////////////////////////
class SortedList
{
private Link first; // ref to first item on list
// -------------------------------------------------------------
public SortedList() // constructor
{ first = null; }
// -------------------------------------------------------------
public boolean isEmpty() // true if no links
{ return (first==null); }
// -------------------------------------------------------------
public void insert(long key) // insert, in order
{
Link newLink = new Link(key); // make new link
Link previous = null; // start at first
Link current = first;
// until end of list,
while(current != null && key > current.dData)
{ // or key > current,
previous = current;
current = current.next; // go to next item
}
if(previous==null) // at beginning of list
first = newLink; // first --> newLink
else // not at beginning
previous.next = newLink; // old prev --> newLink
newLink.next = current; // newLink --> old current
} // end insert()
// -------------------------------------------------------------
public Link remove() // return & delete first link
{ // (assumes non-empty list)
Link temp = first; // save first
first = first.next; // delete first
return temp; // return value
}
// -------------------------------------------------------------
public void displayList()
{
System.out.print("List (first-->last): ");
Link current = first; // start at beginning of list

while(current != null) // until end of list,
{
current.displayLink(); // print data
current = current.next; // move to next link
}
System.out.println("");
}
} // end class SortedList

class LinkPQueue{
	 private SortedList theList;
	 public  LinkPQueue()
	 {
		 theList= new SortedList();}
	 public void insertvalue(long v) {
		 theList.insert(v);
	 }
	 public long removevalue() {
		 return theList.remove().dData;
	 }
	 public void display() {theList.displayList();}
}


public class LinkPQueueApp {

	public static void main(String[] args) {
		
		LinkPQueue pQ = new LinkPQueue();
		
		
		pQ.insertvalue(2);		
		pQ.insertvalue(10);	
		pQ.insertvalue(5);
		pQ.insertvalue(9);
		pQ.display();
		pQ.removevalue();
		pQ.display();
		pQ.removevalue();
		pQ.display();
		
	}
			
	
